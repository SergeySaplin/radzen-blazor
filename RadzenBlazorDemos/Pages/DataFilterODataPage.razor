@page "/datafilter-odata"

@using RadzenBlazorDemos.Data
@using RadzenBlazorDemos.Models.Northwind
@using Microsoft.EntityFrameworkCore

@inject NorthwindODataService service

<RadzenExample Name="DataFilterOData" AdditionalSourceCodePages=@(new List<string>() { "MyCustomDataFilterProperty.razor", "MyCustomEnumerableDataFilterProperty.razor" }) Documentation="false">
<div class="container-fluid">
    <div class="row">
        <div class="col">
            <RadzenCard class="mb-3" style="display: flex; align-items: center; gap: 0.5rem">
                <RadzenCheckBox @bind-Value="@auto" Name="auto" />
                <RadzenLabel Text="Auto filter" Component="auto" Style="margin-left: 8px; margin-right: 32px; vertical-align: middle;" />
                <RadzenButton Text="Apply Filter" Click="@(args => dataFilter.Filter())" Disabled="@auto" />
            </RadzenCard>
            <RadzenCard class="mb-3">
                    <RadzenDataFilter @ref="dataFilter" Auto=auto Data="@orders" TItem="Order" ViewChanged=@(view => ordersGrid.Reload())>
                    <Properties>
                        <RadzenDataFilterProperty TItem="Order" Property="OrderID" Title="Order ID" />
                        <RadzenDataFilterProperty TItem="Order" Property="Employee.LastName" Title="Employee Last Name" />
                        <MyCustomEnumerableDataFilterProperty TItem="Order" Property="Employee.Title" Title="Employee Title" FilterValue="@selectedTitles"
                                                      Type="typeof(IEnumerable<string>)" FilterOperator="FilterOperator.Contains">
                            <FilterTemplate>
                                    <RadzenDropDown @bind-Value=@selectedTitles Style="width:100%;"
                                                    Change=@OnSelectedTitlesChange Data="@(titles)" AllowClear="true" Multiple="true" />
                            </FilterTemplate>
                        </MyCustomEnumerableDataFilterProperty>
                        <MyCustomDataFilterProperty TItem="Order" Property="OrderDate" Title="Order Date" />
                        <RadzenDataFilterProperty TItem="Order" Property="Freight" Title="Freight" />
                    </Properties>
                </RadzenDataFilter>
            </RadzenCard>
            <RadzenDataGrid @ref="ordersGrid" AllowPaging="true" AllowSorting="true" IsLoading="@isLoading"
                Data="@(filteredOrders)" TItem="Order" Count="@count" LoadData="@LoadData"
                ColumnWidth="200px" PageSize="20" Style="height: 500px">
                <Columns>
                    <RadzenDataGridColumn Width="200px" TItem="Order" Property="OrderID" Title="Order ID" />
                    <RadzenDataGridColumn Width="200px" TItem="Order" Property="Customer.CompanyName" Title="Customer" />
                    <RadzenDataGridColumn TItem="Order" Property="Employee.LastName" Title="Employee">
                        <Template Context="order">
                            @order.Employee?.FirstName @order.Employee?.LastName
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Order" Property="Employee.Title" Title="Employee Title" />
                    <RadzenDataGridColumn TItem="Order" Property="OrderDate" Title="Order Date" FormatString="{0:d}">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Order" Property="Freight" Title="Freight">
                        <Template Context="order">
                            @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", order.Freight)
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Order" Property="ShipName" Title="Ship Name" />
                </Columns>
            </RadzenDataGrid>
        </div>
    </div>
</div>
</RadzenExample>

@code {
    bool auto = true;
    RadzenDataFilter<Order> dataFilter;

    IEnumerable<Order> filteredOrders;
    IEnumerable<Order> orders;
    RadzenDataGrid<Order> ordersGrid;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        orders = Enumerable.Empty<Order>();
    }

    List<string> titles = new List<string> { "Sales Representative", "Vice President, Sales", "Sales Manager", "Inside Sales Coordinator" };
    IEnumerable<string> selectedTitles;

    async Task OnSelectedTitlesChange(object value)
    {
        if (selectedTitles != null && !selectedTitles.Any())
        {
            selectedTitles = null;
        }

        await ordersGrid.FirstPage();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await dataFilter.AddFilter(new CompositeFilterDescriptor() 
            { 
                Property = "Employee.LastName", 
                FilterValue = "Buchanan", 
                FilterOperator = FilterOperator.Contains 
            });
        }
    }

    bool isLoading;
    int count;

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        var filter = args.Filter;
        if (dataFilter.Filters.Any())
        {
            filter = !string.IsNullOrEmpty(filter) ?
                $"({dataFilter.ToODataFilterString()}) and ({filter})" : dataFilter.ToODataFilterString();
        }

        var result = await service.GetOrders(filter: filter, top: args.Top, skip: args.Skip, orderby: args.OrderBy, expand: "Customer,Employee", count: true);
        // Update the Data property
        filteredOrders = result.Value.AsODataEnumerable();
        // Update the count
        count = result.Count;

        isLoading = false;
    }
}